var arr = [10,20,30];
undefined
typeof arr;
"object"
arr instanceof Array;
true
var a = new Array(10);
undefined
a;
(10) [empty × 10]
var a = new Array(10,20,30);
undefined
a;
(3) [10, 20, 30]
Array.of(1,2,3);
(3) [1, 2, 3]
Array.of(2);
[2]
Array.from(arr);
(3) [10, 20, 30]0: 101: 202: 30length: 3__proto__: Array(0)
var c2 = Array.from(arr);
undefined
c2;
(3) [10, 20, 30]
c2[0] =1111;
1111
arr;
(3) [10, 20, 30]
c2;
(3) [1111, 20, 30]
Array.isArray(arr);
true
Array.isArray(100);
false
var f = {x:100, y:200};
undefined
f instanceof Object;
true
arr;
(3) [10, 20, 30]
var v = [10,20,30,arr,{x:100,h:[1000,2000]}];
undefined
v;
(5) [10, 20, 30, Array(3), {…}]0: 101: 202: 303: (3) [10, 20, 30]4: {x: 100, h: Array(2)}length: 5__proto__: Array(0)
Array.from(v);
(5) [10, 20, 30, Array(3), {…}]
var g1 = [...[10,20,30],...arr];
undefined
g1;
(6) [10, 20, 30, 10, 20, 30]
var g1 = {...{x:100},...{x:200,y:300}};
undefined
g1;
{x: 200, y: 300}
Array.from
ƒ from() { [native code] }
Array.from([10,20,30],function (y){
console.log('Y is ',y);
})
VM1144:2 Y is  10
VM1144:2 Y is  20
VM1144:2 Y is  30
(3) [undefined, undefined, undefined]
Array.from([10,20,30],function (y){
console.log('Y is ',y);
return 100 + Math.random();
})
VM1190:2 Y is  10
VM1190:2 Y is  20
VM1190:2 Y is  30
(3) [100.92635271866115, 100.44631590712686, 100.10279888157307]
Array.from([10,20,30],function (y){
console.log('Y is ',y);
return y + Math.random();
})
VM1200:2 Y is  10
VM1200:2 Y is  20
VM1200:2 Y is  30
(3) [10.882427279819584, 20.849828020774904, 30.519955246453264]
arr;
(3) [10, 20, 30]
var v1 = [100,200,300];
undefined
arr.concat(v1);
(6) [10, 20, 30, 100, 200, 300]
arr + v1;
"10,20,30100,200,300"
arr;
(3) [10, 20, 30]
arr.copyWithin([1,2],0,1);
(3) [10, 20, 30]
arr;
(3) [10, 20, 30]
arr.copyWithin(0,0,2);
(3) [10, 20, 30]
arr;
(3) [10, 20, 30]
arr = [100,200,300,400,500,600];
(6) [100, 200, 300, 400, 500, 600]
arr.copyWithin(0,3);
(6) [400, 500, 600, 400, 500, 600]
arr = [100,200,300,400,500,600];
(6) [100, 200, 300, 400, 500, 600]
arr.copyWithin(2,3,5);
(6) [100, 200, 400, 500, 500, 600]
arr.values;
ƒ values() { [native code] }
arr.values();
Array Iterator {}
arr.values().next();
{value: 100, done: false}
arr.values().next();
{value: 100, done: false}
arr.values().next();
{value: 100, done: false}
for(let i of arr.values()){
console.log(i);
}
VM1928:2 100
VM1928:2 200
VM1928:2 400
VM1928:2 500
VM1928:2 500
VM1928:2 600
undefined
var itr = arr.values();
undefined
itr.next();
{value: 100, done: false}
itr.next();
{value: 200, done: false}
itr.next();
{value: 400, done: false}
itr.next();
{value: 500, done: false}
itr.next();
{value: 500, done: false}
itr.next();
{value: 600, done: false}
arr;
(6) [100, 200, 400, 500, 500, 600]
itr.next();
{value: undefined, done: true}
function* myItr(){
    yield 1000;
    yield 2000;
    yield 3000;
}
undefined
var y = myItr();
undefined
arr.values
ƒ values() { [native code] }
y;
myItr {<suspended>}
y.next();
{value: 1000, done: false}
y.next();
{value: 2000, done: false}
y.next();
{value: 3000, done: false}
y.next();
{value: undefined, done: true}
function networkCall(){
return ['A','B','C','D']
}
function* nowStreaming(){
    yield {results:[100,200,300]};
    yield networkCall();
    yield 3000;
}
undefined
var ff = nowStreaming();
undefined
ff.next();
{value: {…}, done: false}done: falsevalue: results: (3) [100, 200, 300]__proto__: Object__proto__: Object
ff.next().value;
(4) ["A", "B", "C", "D"]
ff.next().value;
3000
ff.next().value;
undefined
ff.next();
{value: undefined, done: true}
function* otp(){
while(true){
yield Math.random();
}
}
undefined
var g = otp();
undefined
g.next().value;
0.033099214045279046
g.next().value;

0.8194848730554287
g.next().value;

0.03465507246387278
g.next().value;

0.4637077672578356
g.next().value;

0.1527011811230734
g.next().value;

0.46302153503777865
g.next().value;

0.8154590732269551
arr.entries
ƒ entries() { [native code] }
arr.entries().next();
{value: Array(2), done: false}done: falsevalue: (2) [0, 100]__proto__: Object
arr;
(6) [100, 200, 400, 500, 500, 600]
var itr = arr.entries();
undefined
itr.next().value;
(2) [0, 100]
itr.next().value;
(2) [1, 200]
itr.next().value;
(2) [2, 400]
